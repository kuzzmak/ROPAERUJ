package hr.fer.zemris.trisat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Map.Entry;

public class TriSatSolver {
	/**
	 * @param args
	 */
	
	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
        List<Entry<K, V>> list = new ArrayList<>(map.entrySet());
        list.sort(Entry.comparingByValue());

        Map<K, V> result = new HashMap<>();
        for (Entry<K, V> entry : list) {
            result.put(entry.getKey(), entry.getValue());
        }

        return result;
    }
	
	
	
	public static void main(String[] args){
	
//		String path = "C:\\Users\\kuzmi\\OneDrive - fer.hr\\faks\\5sem\\ROPAERUJ\\1zad\\uf20-01.cnf";
//		Parser parser = new Parser(path);
//		SATFormula formula = parser.parse();
//		
//		Algorithm alg = new Algorithm(formula, 1);
//		Random rand = new Random();
//		
//		String solution = alg.solve(2);
//		
//		
//		
//		if(solution != null) System.out.println(solution);
	
		Map<String, Integer> map = new HashMap<>();
		map.put("toni", 4);
		map.put("mikk", 1);
		map.put("jelo", 2);
		map.put("aaa", 2);
		
		map = sortByValue(map);
		Map<String, Integer> map2 = sortByValue(map);
		for(Map.Entry<String, Integer> m: map2.entrySet()){
			System.out.println(m.getKey() + " " + m.getValue());
		}
		
//		List<Boolean> bits = new ArrayList<>();
//		bits.add(true);
//		bits.add(false);
//		bits.add(true);
//		bits.add(true);
//		bits.add(true);
//		
//		MutableBitVector vec = new MutableBitVector(bits);
//		
//		BitVectorNGenerator tt = new BitVectorNGenerator(vec);
//		
//		List<MutableBitVector> vecs = tt.createNeighborhood();
//		
//		
//		System.out.println(vecs);
//		
		
	}
}
